@using WebClient.Abstractions
@using Domain.ViewModel
@using Domain.ClientSideModels
@using Core.Extensions.ModelConversion

@inject ITaskDataService taskService;
@inject IMemberDataService memberService;

@namespace WebClient.Components

<style>
    .task-wrapper .task-item {
        background: #FFFFFF;
        border: 1px solid #C5C9C9;
        box-sizing: border-box;
        border-radius: 8px;
        font-size: 24px;
        font-family: "Poppins Light";
    }

    .done-text {
        text-decoration: line-through;
    }

    .task-wrapper .avtar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
    }

    @@media(max-width: 1400px) {
        .task-wrapper .task-item {
            font-size: 16px;
        }

        .task-wrapper .avtar {
            width: 24px;
            height: 24px;
        }

        .delete-icon {
            width: 25px;
        }
    }

    @@media(max-width: 767.98px) {
        .task-wrapper .avtar {
            width: 16px;
            height: 16px;
        }
    }
</style>

<div class="task-wrapper">
    @if (tasks != null && tasks.Length > 0)
    {
        @foreach (var item in tasks)
        {
            <div class="task-item p-3 my-3 row m-0">
                <div class="col-10 p-0">
                    <Check TValue="bool" Checked="@item.isComplete" CheckedChanged="@(val => ToggleTask(item))">
                        <span class="@(item.isComplete ? "done-text" : "")">@item.taskName</span>
                    </Check>
                </div>
                <div class="col-2 p-0 d-flex justify-content-end align-items-center">
                    @if (item.memberId != null && item.memberId != Guid.Empty)
                    {
                        <div class="avtar mr-1" style="background-color: @item.Avatar;"></div>
                    }
                    <img class="delete-icon" src="/assets/images/delete-icon.svg" />
                </div>
            </div>
        }
    }
</div>

@code  {

    private MemberVm selectedMember;
    [Parameter] public List<TaskModel> tasks { get; set; }

    protected override Task OnInitializedAsync()
    {
        LoadCurrentTasks();
        //taskService.TasksChanged += TaskServiceOnTasksUpdated;
        //taskService.SelectedTaskChanged += TaskServiceOnSelectedMemberChanged;
        return base.OnInitializedAsync();
    }

    private void ToggleTask(TaskItem model)
    {
        //taskService.ToggleTask(model.Id);
        StateHasChanged();
    }

    private void TaskServiceOnTasksUpdated(object sender, EventArgs e)
    {
        LoadCurrentTasks();
    }

    private void TaskServiceOnSelectedMemberChanged(object sender, EventArgs e)
    {
        LoadCurrentTasks();
    }

    private void LoadCurrentTasks()
    {
        selectedMember = memberService.SelectedMember;

        if (selectedMember == null || selectedMember.Id == Guid.Empty)
        {
            tasks = taskService.Tasks.ToTaskItems();
            StateHasChanged();
            return;
        };

        //tasks = taskService.Tasks.Where(t => t.AssignedToId == selectedMember.Id).ToList();
        StateHasChanged();
    }

}