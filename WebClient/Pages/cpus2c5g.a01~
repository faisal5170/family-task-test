@page "/manage-tasks"
@inject HttpClient http
@using Domain.ViewModel
@using Domain.ClientSideModels
@using WebClient.Abstractions
@using WebClient.Components
@using WebClient.Shared.Components
@inject IMemberDataService memberService;
@inject ITaskDataService taskDataService;

@if (isLoaded)
{
    <div class="page-wrapper row m-0 col-12 p-0">
        <div class="col-4 p-0">
            <LeftMenu TaskAssignedCallback="@TaskAssingedOnDrop" MenuItems="@MenuItems" OnAddMemberCallback="@OnAddMember" />
        </div>
        <div class="col-8 p-0">
            @if (showLister)
            {
                <div class="col-10 offset-1 pt-5">
                    <div class="row m-0">
                        <Field class="col-9 p-0 custom-input">
                            <TextEdit Placeholder="Enter New Task" @bind-text="@task.Subject" />
                        </Field>
                        <div class="col-3 p-0 text-right">
                            <Button class="add-btn px-4" @onclick="@OnAddItem">Add</Button>
                        </div>
                    </div>
                </div>
                <div class="col-10 offset-1">
                    <TaskListerComponent Tasks="@filteredTasks" UpdateCallback="@UpdateTask" />
                </div>
            }
            @if (false)
            {
                <div class="col-10 offset-1 pt-5">
                    <FamilyMemberCreator />
                </div>
            }
        </div>
    </div>
}

@code {

    private FamilyMember[] members;
    public MenuItem[] MenuItems;
    private TaskVm task;
    public List<TaskModel> tasks;
    public List<TaskModel> filteredTasks;
    public NewTask newTask = new NewTask { AssignedMemberId = "", Subject = "" };

    private bool isLoaded;
    private bool showLister;
    private bool showCreator;

    protected override async Task OnInitializedAsync()
    {
        showLister = true;
        isLoaded = true;
        task = new TaskVm();
        tasks = new List<TaskModel>();
        filteredTasks = new List<TaskModel>();
        members = await memberService.GetAllMembers1();
        await LoadCurrentTasks();
        SetLeftMenuItems(members);
    }

    private async Task OnAddItem()
    {
        if (memberService?.SelectedMember != null)
        {
            task.AssignedToId = memberService.SelectedMember.Id;
        }
        var addedTaskResult = await taskDataService.CreateTask(task);
        if (addedTaskResult != null && addedTaskResult.Payload != null)
        {
            var taskVm = addedTaskResult.Payload;
            var taskModel = new TaskModel();
            taskModel.id = taskVm.Id;
            taskModel.isDone = taskVm.IsComplete;
            if (taskVm.Member != null)
            {
                var memberInfo = taskVm.Member;
                taskModel.member = new FamilyMember() { id = memberInfo.Id, firstname = memberInfo.FirstName, lastname = memberInfo.LastName, avtar = memberInfo.Avatar };
            }
            taskModel.text = task.Subject;
            this.tasks.Add(taskModel);
            this.filteredTasks.Add(taskModel);
            task.Subject = string.Empty;
            StateHasChanged();
        }
    }

    private async Task LoadCurrentTasks()
    {
        var taskResults = await taskDataService.GetAllTasks();
        foreach (var taskItem in taskResults.Payload)
        {
            tasks.Add(new TaskModel()
            {
                id = taskItem.Id,
                text = taskItem.Subject,
                isDone = taskItem.IsComplete,
                member = taskItem.Member == null ? null : new FamilyMember()
                {
                    avtar = taskItem.Member.Avatar,
                    id = taskItem.Member.Id
                }
            });
        }
        //filteredTasks = tasks;
        StateHasChanged();
    }

    private void SetLeftMenuItems(FamilyMember[] members)
    {

        MenuItems = new MenuItem[members.Length + 1];
        MenuItems[0] = new MenuItem
        {
            label = "All Tasks",
            referenceId = Guid.Empty,
            isActive = true
        };
        MenuItems[0].ClickCallback += showAllTasks;
        for (int i = 1; i < members.Length + 1; i++)
        {
            MenuItems[i] = new MenuItem
            {
                iconColor = members[i - 1].avtar,
                label = members[i - 1].firstname,
                referenceId = members[i - 1].id,
                isActive = false
            };
            MenuItems[i].ClickCallback += onItemClick;
        }
    }
    private void showAllTasks(object sender, object e)
    {
        filteredTasks = tasks;
        showLister = true;
        showCreator = false;
        newTask.AssignedMemberId = string.Empty;
        makeMenuItemActive(e);
        StateHasChanged();
    }
    private void makeMenuItemActive(object e)
    {
        foreach (var item in MenuItems)
        {
            item.isActive = false;
        }
        if (e != null)
        {
            e.GetType().GetProperty("isActive").SetValue(e, true);
        }
    }
    private void onItemClick(object sender, object e)
    {
        Guid val = (Guid)e.GetType().GetProperty("referenceId").GetValue(e);
        makeMenuItemActive(e);
        if (tasks != null && tasks.Count > 0)
        {
            filteredTasks = tasks.Where(item =>
            {
                if (item.member != null)
                {
                    return item.member.id == val;
                }
                else
                {
                    return false;
                }
            }).ToList();
        }
        showLister = true;
        showCreator = false;
        newTask.AssignedMemberId = val.ToString();
        StateHasChanged();
    }
    private async void UpdateTask(TaskModel task)
    {
        var updateTaskCommand = new Domain.Commands.UpdateTaskCommand()
        {
            IsComplete = task.isDone,
            Subject = task.text,
            Id = task.id,
            AssignedToId = task.member?.id
        };
        var result = await taskDataService.Update(updateTaskCommand);
        StateHasChanged();
    }

    private void OnAddMember()
    {
        memberService.SelectNullMember();
    }

    private async Task TaskAssingedOnDrop(TaskVm vm)
    {

        var newTaskMember = members.First(u => u.id == vm.AssignedToId);

        var taskFromAllTaskUpdated = tasks.First(u => u.id == vm.Id);

        taskFromAllTaskUpdated.member = newTaskMember;

        if (Guid.TryParse(newTask.AssignedMemberId, out Guid selectedMemberId))
        {
            filteredTasks = tasks.Where(item =>
            {
                if (item.member != null)
                {
                    return item.member.id == selectedMemberId;
                }
                else
                {
                    return false;
                }
            }).ToList();
        }
        else
        {
            filteredTasks = tasks;
        }

        StateHasChanged();
    }
}